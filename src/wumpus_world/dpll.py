import copy

class Solver:
    def __init__(self, cnf):
        print(cnf)
        self.clauseSet = cnf
        self.literlist = []
    
    def solve(self):
        clauses = self.clauseSet
        
        return self.dpll(clauses)
        
    def dpll(self, clauses):
        unit_literals = []
        pure_literals = []
        p1 = []
        p2 = []
        symbols = []
        
        if not clauses:
            return True
        elif set() in clauses:
            return False

        symbols = self.refresh_symbols(clauses)
        
        unit_literals = self.unitPropagation(clauses)
        print('unit', unit_literals)
        if (len(unit_literals) > 0):
            return self.dpll(self.reduce(clauses, unit_literals))
        
        pure_literals = self.assignPure(clauses)
        print('pure', pure_literals)
        if (len(pure_literals) > 0):
            return self.dpll(self.reduce(clauses, pure_literals))
        
        s = copy.deepcopy(clauses)
        unassigned = self.make_heuristic(symbols)
        p1.append({unassigned})
        p2.append({-unassigned})
        print('unassigned', p1, p2)
        
        result = self.dpll(self.reduce(clauses, p1))
        if result:
            return result
        else:
            result = self.dpll(self.reduce(s, p2))
            if result:
                return result
            else:
                return False
    
    def refresh_symbols(self, in_cnf):
        out_symbols = []
        
        for clause in in_cnf:
            for literal in clause:
                out_symbols.append(literal)
        
        return out_symbols
              
    # find unit literal
    def unitPropagation(self, in_cnf):
        p = []
        for clause in in_cnf:
            if(len(clause) == 1):
                p.append(clause)

        return p

    # find pure literal
    def assignPure(self, in_cnf):
        p = []
        elements = []
        for i in in_cnf:
            for j in i:
                elements.append(j)
        
        for i in elements:
            if i in elements and -i not in elements:
                if {i} not in p:
                    p.append({i})

        return p
    
    # reduce clauses or single literal    
    def reduce(self, in_cnf, in_clauses):
        out_cnf = in_cnf
        length = len(out_cnf)
        elements = []
        # extract all elements from the set list
        for i in in_clauses:
            for j in i:
                elements.append(j)
        print(elements)
        
        clause_truth = [[0 for col in range(2)] for row in range(length)]
        for i in range(0, length):
            clause_truth[i][0] = out_cnf[i]
            clause_truth[i][1] = 0
        
        for i in elements:
            for j in clause_truth:
                if i in j[0]:
                    j[1] = 1
                if -i in j[0]:
                    j[1] = -1

        for i in clause_truth:
            if (i[1] == 1):
                if i[0] in out_cnf:
                    out_cnf.remove(i[0])
            elif (i[1] == -1):
                for j in elements:
                    if i[0] in out_cnf:
                        tmp = i[0] - {-j}
                        out_cnf.remove(i[0])
                        out_cnf.append(tmp)
         
        for i in clause_truth:
            print(i)

        print('new cnf: ', out_cnf)
        return out_cnf
    
    # the heuristic to find the literal which occur most
    def make_heuristic(self, in_symbols):
        literal_count = []
        max_count = 0
        max_values = []

        for i in in_symbols:
            count = 0
            for j in in_symbols:
                if(i == j):
                    count = count + 1
            if [i, count] not in literal_count:
                literal_count.append([i, count])
            
        for i in literal_count:
            for j in literal_count:
                if i[1] >= j[1]:
                    max_count = i[1]
        
        for i in literal_count:
            if (i[1] == max_count):
                max_values.append(i[0])
        
        return max_values[0]

# these clauses should be true
# clause_set = [{-32, 3, 19}, {48, 37, -2}, {-32, -39, -29}, {-14, 3, -2}, {-38, -4, -22}, {32, 1, -44}, {-40, 16, 10}, {-48, -5, 28}, {-31, -37, 36}, {-7, -15, -18}, {-39, -47, 29}, {-39, -28, 46}, {11, 14, -13}, {-46, 35, -20}, {9, -1, 25}, {-31, 34, 20}, {16, 19, 14}, {-31, -26, 39}, {33, 35, -19}, {-23, -37, 12}, {-16, 33, -45}, {3, -35, 47}, {-40, -18, -49}, {9, -3, -26}, {17, -46, 1}, {-7, 36, -9}, {-36, -34, 47}, {1, -23, -50}, {35, 36, 38}, {-24, -4, -34}, {-47, -1, 22}, {-8, -36, 21}, {48, -27, -42}, {24, 10, -27}, {33, 28, 21}, {16, -44, 36}, {16, -24, 30}, {-48, -4, 12}, {12, 20, -34}, {41, 3, -11}, {-40, -3, 47}, {-15, -23, 14}, {16, 17, 50}, {-12, -42, -17}, {-40, -45, -44}, {-39, -23, -2}, {17, -50, -26}, {8, 4, 5}, {34, -29, -5}, {33, 34, -9}, {32, 20, 31}, {-16, 34, 15}, {-7, -37, 30}, {-32, -13, 4}, {-47, -36, -9}, {8, 1, 39}, {49, 36, 37}, {-6, 4, 50}, {1, 34, 39}, {-19, -5, 29}, {-23, 50, -41}, {-7, -29, 14}, {-31, -34, -33}, {-32, 35, -27}, {40, -30, 11}, {-47, -13, 15}, {-24, 40, -19}, {-5, 30, 31}, {33, -5, -9}, {48, -7, -36}, {27, -37, -29}, {19, 27, -35}, {-39, -13, 47}, {-41, 35, -33}, {-8, 29, -26}, {-15, -35, 47}, {-12, -20, -16}, {16, -10, 6}, {-4, 37, -42}, {-40, -12, -48}, {-22, -1, 23}, {17, -47, -19}, {-4, 10, 12}, {16, -36, -12}, {-40, -7, -44}, {1, -4, -26}, {8, 16, 27}, {-47, -30, 35}, {8, 18, -49}, {35, -4, -18}, {3, 2, -21}, {-18, 4, -10}, {18, 3, -10}, {49, -2, -17}, {-20, -28, -32}, {-48, -46, -45}, {-7, 18, 45}, {-24, 5, -2}, {44, -50, -9}, {-38, 14, -9}, {-28, -2, 30}, {16, -5, -26}, {-21, 22, -49}, {-4, -37, -36}, {34, -43, 39}, {2, -44, -19}, {-37, 5, 39}, {26, -50, 6}, {40, -30, -14}, {33, 12, -10}, {-7, -20, 13}, {33, 19, 17}, {48, 17, 10}, {41, -33, 39}, {-24, 9, -21}, {-20, 19, 44}, {-16, -23, 39}, {11, -35, 7}, {40, -27, 5}, {49, -7, -43}, {-32, -22, 11}, {40, 11, 6}, {-24, 8, -42}, {33, -13, -28}, {-39, 4, -25}, {33, 19, 41}, {-39, 13, 14}, {-7, -9, -49}, {-48, 7, -25}, {42, -11, -34}, {11, 28, 13}, {32, -15, -49}, {-41, -5, 47}, {-32, -21, 23}, {21, -42, -33}, {-23, 5, 6}, {20, 38, -33}, {-31, 43, -26}, {-47, -10, -41}, {40, -20, 30}, {11, -5, -28}, {34, -37, -20}, {25, -30, 28}, {-39, 13, -35}, {-8, 1, 28}, {-44, 13, -1}, {-30, 2, -41}, {-15, 11, -26}, {41, -3, -42}, {2, 11, -18}, {25, 30, 15}, {44, -1, -41}, {42, 44, -34}, {-14, -45, -19}, {-16, 8, -37}, {-12, 4, 6}, {8, 50, -5}, {-3, 37, -42}, {-46, 10, -49}, {13, 21, -14}, {10, 20, -41}, {46, 29, 14}, {-14, 12, -17}, {-14, 43, -45}, {8, 17, 5}, {-19, 45, -9}, {-46, -14, -22}, {8, 6, -49}, {-39, 19, -36}, {48, 49, 6}, {17, -28, -19}, {31, 30, 22}, {15, -19, 47}, {26, 10, -50}, {-29, -43, 38}, {-8, 34, -13}, {24, -47, -31}, {43, 20, 12}, {50, 19, -12}, {-8, -3, 14}, {-7, 11, -2}, {32, -45, 28}, {2, -21, -19}, {-32, -28, 44}, {-6, -28, -3}, {-5, 45, -49}, {-22, 29, -9}, {-31, 37, 22}, {32, 17, -2}, {48, -3, 15}, {-39, 3, -10}, {48, -22, -1}, {-23, -47, -49}, {-31, -20, 30}, {49, -23, 7}, {-24, -39, -29}, {32, 33, -28}, {25, -1, 41}, {-1, -19, -50}, {49, 2, -34}, {19, -3, -10}, {-11, -30, 21}, {3, -19, 22}, {40, -1, -42}, {-13, 20, -41}, {-40, 9, -34}, {-16, 48, -36}, {-41, 47, -25}, {33, 13, -42}, {48, -36, -43}, {-46, 50, -36}, {-48, 3, -41}, {11, 20, 38}, {21, 37, -2}, {-44, 21, 15}, {-30, 28, 6}, {-4, -1, 7}, {48, -26, -33}]
# clause_set = [{-22, -18, -41}, {18, 14, -49}, {25, 43, 28}, {-32, 44, -33}, {49, -30, 47}, {-46, -12, -50}, {-8, -45, 6}, {-24, 5, -3}, {-8, -47, 29}, {-33, 47, 15}, {-38, -36, 5}, {-46, -22, -35}, {-48, 9, -1}, {-39, 25, 15}, {-44, -50, -17}, {-46, -13, -14}, {-16, 27, -1}, {24, 4, -19}, {10, 6, 23}, {41, 45, -42}, {-30, 29, -33}, {-31, -43, 47}, {1, 42, -37}, {34, 14, -6}, {-22, -10, -49}, {25, -5, -23}, {35, -3, -41}, {16, -20, -12}, {-20, 42, -36}, {25, -22, 17}, {33, -35, -18}, {-23, -3, -2}, {16, -23, -46}, {20, -3, -1}, {2, -19, 15}, {-40, -45, -32}, {-47, -33, -17}, {48, 13, 23}, {-24, 17, -50}, {-3, -27, -25}, {32, 43, 21}, {27, -5, -10}, {19, 12, 38}, {-32, 5, 39}, {32, 26, -9}, {-15, 2, 44}, {8, 49, -30}, {-32, 35, -20}, {-24, -43, -33}, {-23, -29, 39}, {-30, 36, 39}, {43, 12, -19}, {-38, 34, -44}, {18, 28, 39}, {-44, -10, 47}, {-20, 4, -19}, {-30, 42, -26}, {-47, 2, 28}, {50, 44, -11}, {-44, 4, -17}, {17, -18, -25}, {40, -21, -44}, {32, 9, 31}, {-32, 8, 26}, {-39, -30, -47}, {-14, 45, -1}, {10, -37, -2}, {-17, -37, -33}, {27, 4, 7}, {25, -47, -7}, {-41, -2, -33}, {-39, 26, -36}, {-23, 34, -31}, {-28, -20, 4}, {-8, -36, 14}, {32, -50, -48}, {-13, 12, -1}, {33, 22, 47}, {-40, -48, 31}, {-43, 50, 5}, {8, -16, -17}, {-38, 42, 6}, {8, 17, -27}, {18, 11, -33}, {-8, 17, -20}, {17, -50, 33}, {41, -28, 49}, {-6, 30, -25}, {34, -19, 6}, {-16, 24, -2}, {-13, -35, -41}, {-26, -20, 36}, {-40, 9, 26}, {8, 34, -26}, {-38, -50, 39}, {-48, -5, 23}, {35, 12, -34}, {-40, -11, -49}, {-7, -22, -28}, {40, 18, -45}, {-29, 22, 47}, {-21, -27, -50}, {21, -19, -34}, {40, 10, -5}, {-7, 2, -15}, {-21, 36, -45}, {-7, 42, -45}, {43, 19, 46}, {35, -29, 1}, {8, 18, -34}, {24, 26, 27}, {-16, 34, 23}, {-47, 39, -25}, {-48, 1, -5}, {-6, 5, 21}, {-31, 2, 36}, {-32, 48, 19}, {-40, 49, 20}, {9, -42, 30}, {-31, -37, -23}, {-31, 20, -50}, {-12, 45, 14}, {3, -1, -17}, {-21, -20, -9}, {9, -36, -10}, {-16, -14, 6}, {9, 37, 30}, {-16, 21, -19}, {32, 17, -47}, {19, -28, -37}, {40, -45, 39}, {48, -47, -37}, {-16, -34, 38}, {40, 20, 47}, {-40, -20, -2}, {27, -34, 30}, {26, -13, 36}, {-13, -11, 6}, {37, 21, -34}, {-47, 5, -26}, {-32, 24, -10}, {48, 1, -26}, {41, -22, -1}, {49, 19, -42}, {9, 34, -36}, {-23, 20, -42}, {9, 5, 17}, {8, -23, -5}, {-32, -30, -1}, {-15, 2, -23}, {3, 19, 21}, {-24, 3, -13}, {-24, -38, -2}, {26, -12, 47}, {-40, 34, -26}, {-40, 5, 6}, {50, 43, -20}, {25, -13, -42}, {25, -3, 46}, {-46, -44, -30}, {25, 35, 21}, {-16, -45, 21}, {-19, -10, 22}, {-23, -4, 15}, {40, 17, 39}, {40, 49, 44}, {-13, -26, 31}, {-8, 27, -5}, {-46, -45, 38}, {10, 28, 13}, {45, -27, -10}, {41, 9, 25}, {-10, 30, 31}, {-24, 16, -30}, {-15, -39, -18}, {-47, -44, -18}, {-39, 50, 34}, {-47, -35, -2}, {50, -21, -11}, {24, 11, -41}, {32, -47, 25}, {8, 33, -42}, {-48, 37, -3}, {-30, 10, 34}, {17, 18, 44}, {-16, 36, 39}, {-20, 14, -33}, {-40, 42, 31}, {-1, -29, -50}, {1, 12, -3}, {-37, -3, 6}, {19, -29, 4}, {-24, -6, 48}, {-6, 20, -50}, {19, -36, -27}, {2, -35, -41}, {-47, -13, 29}, {-7, -38, 4}, {-48, -4, 5}, {1, 22, 39}, {38, 11, -10}, {-30, -50, -41}, {-48, 19, 6}, {38, 14, -9}, {-21, -4, -19}, {29, 46, -49}, {35, 28, 38}, {10, -19, -33}, {-47, 43, -45}, {-48, 3, -13}, {10, -29, -17}, {-24, -11, -43}, {-38, 42, -6}, {41, 11, -27}, {-50, -26, -33}, {-14, -5, 7}, {-7, -47, 29}, {-39, -26, 14}]


# this clause should be false
clause_set = [{-39, 4, -19}, {7, 36, -49}, {41, -31, -17}, {16, 38, -48}, {40, 19, 15}, {-43, -44, -35}, {25, -43, 33}, {49, -15, 38}, {48, -13, -12}, {24, -28, -9}, {18, 26, 28}, {-27, 38, -9}, {-15, -36, 28}, {-31, 11, 45}, {-37, 31, -33}, {2, 28, 13}, {-12, 27, -4}, {-31, -10, -49}, {-6, 10, -41}, {-2, -35, 38}, {-9, -44, 7}, {-13, -44, 39}, {35, -1, 23}, {-8, 17, -9}, {-31, 29, -50}, {-35, 33, -43}, {-6, -1, -9}, {-21, -19, -41}, {-49, 46, -41}, {-5, 20, -10}, {-22, 12, -50}, {-39, 20, 36}, {26, 20, 38}, {13, -10, -9}, {32, 40, 48}, {41, 9, 31}, {43, -26, 47}, {50, 45, 31}, {29, -13, -27}, {33, 36, 15}, {-35, -21, -43}, {24, -37, -34}, {8, 48, 46}, {5, 30, -41}, {-31, -14, -25}, {19, -13, -3}, {40, 28, 29}, {8, 17, 4}, {16, -23, 37}, {49, 4, 33}, {49, -6, -37}, {33, -21, 5}, {-31, -29, -41}, {-39, 10, 22}, {-15, 28, 14}, {-23, 36, 22}, {34, 36, 5}, {37, -50, 7}, {-8, -20, -11}, {11, 45, -41}, {-32, -7, 14}, {33, 29, -2}, {16, 2, 47}, {-13, 21, 6}, {46, -38, 30}, {33, -38, 22}, {6, -50, -33}, {10, -37, -12}, {40, -11, 7}, {3, -43, 47}, {9, -46, -6}, {-39, -45, -41}, {-12, -11, -2}, {-43, 5, -26}, {24, -30, 14}, {-46, -4, -18}, {-29, -44, -17}, {41, 36, 5}, {-16, -46, 7}, {33, 28, 1}, {18, -28, 22}, {20, 21, 30}, {18, 50, 39}, {-38, -6, -27}, {-32, -13, -27}, {-15, 3, 20}, {11, 45, 22}, {3, 11, -26}, {33, -18, 23}, {-45, 6, 31}, {43, -29, 5}, {-22, 11, 21}, {-45, 39, -33}, {19, -13, -26}, {-24, 2, 48}, {-13, -28, -25}, {40, -5, 46}, {12, -3, -1}, {2, 20, -6}, {10, -37, -18}, {11, 36, 5}, {-46, 7, -9}, {-47, -44, 25}, {-39, 38, 49}, {-31, -6, 21}, {-48, 18, 45}, {-8, 44, 31}, {-36, 12, -25}, {18, 21, 7}, {-8, -46, 31}, {33, 35, -15}, {10, -35, 23}, {-14, -36, -18}, {2, -37, -17}, {-14, 28, -19}, {46, -19, -26}, {50, -11, -22}, {-23, 18, -20}, {-32, -36, 5}, {-47, 30, 25}, {41, -14, 21}, {17, -28, 7}, {-32, 25, -39}, {2, -43, 22}, {-47, -21, -17}, {-7, 5, 49}, {8, -15, -43}, {25, -35, -50}, {-38, -26, -25}, {-48, -47, -49}, {-45, -36, -26}, {-6, -42, -33}, {50, 37, -10}, {-38, -50, -49}, {29, 3, -43}, {28, 12, 22}, {3, -44, -9}, {2, 12, 31}, {43, -4, -26}, {-7, 21, -42}, {48, 1, 3}, {13, -18, 47}, {-27, 21, -25}, {-24, -2, 7}, {34, -13, -9}, {27, -35, -21}, {3, -35, 47}, {33, 37, -49}, {-41, -11, 7}, {-45, -21, -26}, {-11, -3, 14}, {-48, 11, -36}, {24, 18, -26}, {-30, -45, 22}, {-46, -3, -22}, {-2, -18, -49}, {32, -37, 45}, {12, -11, 44}, {-47, 21, 38}, {-47, -46, 14}, {-3, -42, -9}, {-16, 22, -41}, {-5, -27, -45}, {1, -31, 15}, {27, 3, 12}, {-3, -15, -27}, {-15, -20, 37}, {43, -6, 27}, {-24, 25, -39}, {2, 36, 50}, {-45, 14, -25}, {47, -50, 39}, {-47, 45, -2}, {8, 4, -17}, {-28, 44, -9}, {31, 22, 39}, {8, 13, -1}, {28, 12, 39}, {-21, -42, 23}, {40, -22, 6}, {-8, 41, 7}, {-35, -22, 13}, {8, -5, 44}, {-36, 22, 31}, {38, -26, 31}, {-16, -31, 11}, {41, 28, 5}, {-16, -30, 23}, {-29, 7, 31}, {27, 13, 47}, {-47, -28, 21}, {40, 43, 38}, {-32, -38, -43}, {-23, -13, -28}, {1, -46, 6}, {18, -45, 47}, {-48, -20, 30}, {-39, 26, 25}, {-8, -1, 23}, {33, 35, -12}, {24, -22, 39}, {-44, -28, 38}, {24, -8, 45}, {32, 17, -27}, {36, 45, -49}, {32, 25, 50}, {32, -38, -9}, {-40, -46, -48}, {16, 9, 45}, {9, 5, 14}, {-39, -34, 47}, {49, -3, -25}, {-47, -31, 23}, {-8, -21, 46}, {48, -37, -19}, {-31, 26, 28}, {-8, 10, -49}, {49, 12, 23}]
# clause_set = [{-32, -29, -36}, {-19, -27, -25}, {50, 19, -4}, {12, 46, 23}, {-4, -44, -26}, {-7, -14, 28}, {33, 26, -19}, {-38, -44, -41}, {-32, 11, 12}, {-8, -37, -42}, {32, -50, 39}, {-23, 10, 3}, {-48, 17, -1}, {27, 44, 6}, {-15, -20, -41}, {-22, -20, 14}, {8, 44, 5}, {-23, 18, -4}, {11, -26, -21}, {40, 20, 46}, {-36, 44, 20}, {-6, 3, 13}, {2, 42, -35}, {40, -4, -11}, {17, -12, -10}, {-30, 21, -14}, {-21, 4, -33}, {-35, -34, 22}, {-45, 44, 31}, {32, 50, -24}, {-40, -8, 46}, {34, 42, -18}, {42, -13, 34}, {-16, -12, 14}, {-45, -20, 6}, {17, -46, 20}, {50, -6, -49}, {49, -10, 33}, {-6, 27, 21}, {17, 21, 29}, {-24, -5, -28}, {-36, -35, -41}, {16, 41, 43}, {33, -45, -41}, {-22, -28, -26}, {18, 5, -14}, {-46, -35, -49}, {18, -14, -37}, {-34, -50, 7}, {40, 8, -33}, {8, 2, 44}, {-14, -12, -49}, {-6, 30, -25}, {16, 35, -2}, {34, -43, -14}, {-31, 3, -42}, {9, -36, 31}, {27, 29, 31}, {38, -26, 47}, {35, 43, 12}, {49, -46, -1}, {49, 21, 22}, {24, 36, -33}, {-14, 47, 15}, {33, 50, 3}, {-32, 6, -9}, {16, 17, -27}, {2, -3, 22}, {16, -5, -19}, {49, 18, -14}, {11, -12, -25}, {45, -27, 6}, {-24, 13, -42}, {-15, -47, 6}, {40, 45, 7}, {32, 11, 36}, {-39, -46, -26}, {-39, -6, 50}, {-21, -2, 7}, {-38, 30, -22}, {-4, -19, 39}, {-15, 42, 33}, {-3, -20, 13}, {40, -39, -4}, {-22, 39, 23}, {-40, -20, 30}, {8, 42, -9}, {-48, 22, -9}, {50, 35, 30}, {42, -43, -6}, {-16, 27, 13}, {-29, 4, -1}, {33, 26, -44}, {41, -14, 15}, {-31, 2, 28}, {-24, 35, -12}, {40, 35, 20}, {49, -13, -34}, {2, -10, 31}, {-32, -23, -46}, {-7, 42, -27}, {-32, -17, 39}, {-8, 16, -48}, {-14, -4, 5}, {-16, 21, -17}, {42, 11, 39}, {1, 35, 46}, {-13, -3, -33}, {-8, 41, -44}, {9, 27, 45}, {50, -20, 12}, {16, 34, -18}, {-32, 35, -37}, {-35, -30, -3}, {-22, -5, -36}, {-6, 43, 5}, {28, 36, -19}, {-21, -3, -50}, {-16, -13, -41}, {25, -14, 39}, {-24, 11, -5}, {48, -10, -26}, {17, -46, -10}, {-46, 11, -27}, {16, 28, -17}, {-21, 20, -10}, {25, 20, -1}, {-32, 9, -46}, {20, 14, 31}, {43, 36, -27}, {-28, 23, -9}, {-40, -47, 7}, {48, -3, -43}, {-20, 5, 30}, {6, 30, -49}, {41, -46, 30}, {25, 10, 44}, {-48, -11, 22}, {38, -14, 6}, {-49, 12, 39}, {-40, -36, 31}, {-40, -39, 41}, {-12, -14, 4}, {46, 35, -50}, {43, 44, 22}, {-6, -44, 46}, {10, -3, 30}, {11, 46, 31}, {46, -16, -1}, {-40, 1, -44}, {16, 45, -42}, {-10, -5, -26}, {9, 43, 44}, {1, -3, -41}, {-27, -50, 7}, {-32, -21, -41}, {-38, -13, 23}, {-39, -28, -10}, {25, 44, -33}, {39, -19, 31}, {-16, -15, 36}, {-35, 37, -10}, {19, -50, -33}, {26, -12, 6}, {-24, -12, 36}, {-15, -36, 13}, {-6, -20, 22}, {42, 4, -34}, {2, -34, -22}, {-1, 14, -25}, {11, -27, 31}, {48, -37, -40}, {-24, -39, -22}, {-8, 1, 26}, {-15, -19, -2}, {-5, -11, 38}, {33, -28, 21}, {49, 20, -35}, {-14, -19, -34}, {17, -1, -41}, {33, 43, 47}, {48, 41, 34}, {-16, -15, 41}, {33, 21, -50}, {-35, 3, 29}, {40, 13, 31}, {25, 50, 2}, {19, 34, -37}, {1, 19, -28}, {17, 35, 20}, {2, -45, -18}, {-38, -34, 39}, {40, -7, 6}, {-24, -45, -10}, {19, 35, -10}, {-6, -42, -33}, {-37, 28, -9}, {24, -30, 2}, {24, -48, -41}, {-48, 43, 36}, {12, 29, -9}, {-26, -45, 46}, {-3, -1, 15}, {25, -3, -2}, {-28, -10, 44}, {-40, 49, -43}, {-44, 13, -2}, {50, -20, 47}, {48, 49, -12}, {19, 23, -41}, {-7, 5, -43}, {-38, -12, -43}, {16, 25, 47}, {19, -45, 13}, {-38, 2, -5}, {34, -45, -26}, {41, 6, 31}, {-18, 36, -50}]

# clause_set = [{1, 2, 3}, {-1, 3}, {4}, {-3}, {-4, 3}, {6, 8}]
# clause_set = [{1, 2, 3}, {-1, 3}, {-4, 3}, {6, 8}, {-1, -2}]
# clause_set = [{1, 3}, {-1, 3}, {-1, -3}, {49, -50}, {50, 49}, {-49, -50}, {50, -49}]
# clause_set = [{1,2, 3}, {-1, 3},{4}, {-4, -3}]
# clause_set = [{4}, {-4}]
# clause_set = [{1, 2, 3}, {-1, -4, 5}, {-1, 4}]

s = Solver(clause_set)
print(s.solve())
